from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import random
from random import choice

import requests
import os
import asyncio
import time

from pyowm import OWM
from pyowm.utils.config import get_default_config

from bs4 import BeautifulSoup
from config import TOKEN,DEVELOPER,API_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
owm = OWM(API_KEY)

letters = ["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–Å", "–ñ", "–ó", "–ò", "–ö", "–õ", "–ú", "–ù", "–û", "–ü", "–†", "–°", "–¢", "–£", "–§", "–•", "–¶", "–ß", "–©", "–≠", "–Æ", "–Ø"]
last_time = {}

# Check have user admin in group
async def is_admin_group(chat_id, user_id):
    try:
        result = await bot.get_chat_member(chat_id, user_id)
        if "administrator" in result["status"] or "creator" in result["status"]:
            return True
        return False
    except Exception as e:
        pass
        
# Check game in chat
def is_game_in_chat(chat_id):
    try:
        with open("chats/" + str(chat_id) + "/" + "info.txt") as game:
            game.close()
        return True
    except Exception as e:
        return False

# Check dirs 
def verification_dirs_chat(chat_id):
    try:
        path = os.path.join(os.getcwd() + "/chats", str(chat_id))
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "crosses")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "associations")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "hand")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "charade")
        if not os.path.exists(path):
            os.mkdir(path)

    except Exception as e:
        pass

# Remove dirs
def remove_dirs_chat(chat_id):
    try:
        path = os.path.join(os.getcwd() + "/chats", str(chat_id))

        if os.path.exists(path):

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "crosses")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/crosses")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/crosses/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/crosses")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "associations")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/associations")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/associations/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/associations")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "hand")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/hand")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/hand/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/hand")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "charade")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/charade")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/charade/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/charade")

            files = os.listdir(os.getcwd() + "/chats/" + str(chat_id))
            if files:
                for temp in files:
                    os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/" + temp)

            return os.rmdir(os.getcwd() + "/chats/" + str(chat_id))

    except Exception as e:
        pass

# Type: new member
@dp.message_handler(content_types=["new_chat_members"])
async def new_chat_members_delete(message):
    try:
        if await is_admin_group(message.chat.id, message.bot.id):
            await bot.delete_message(message.chat.id, message.message_id)
            
        if message.new_chat_members[0].id == bot.id:
            verification_dirs_chat(message.chat.id)
            buttons  = [types.InlineKeyboardButton(text='–ò–≥—Ä—ã üìå', callback_data="–ò–≥—Ä—ã"),types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å ‚óÄ', callback_data="–ü–æ–º–æ—â—å")] 
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            return await message.answer("üçç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, –≥–æ—Å–ø–æ–¥–∞!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç - *–ê–Ω–∞–Ω–∞—Å—ã—á*\n–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç\n\n–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ:\nüíæ –ò–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã\nüëÆ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º\nüîî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç\n\n_–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã–¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞_", parse_mode="Markdown", reply_markup=keyboard)
        return await message.answer("üçç[%s](tg://user?id=%d), *–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ %s*" % (message.new_chat_members[0].first_name, message.new_chat_members[0].id,message.chat.full_name), parse_mode="Markdown")
    except Exception as e:
        pass

# Type: left member
@dp.message_handler(content_types=["left_chat_member"])
async def new_chat_members_delete(message):
    try:
        if message.left_chat_member.id == bot.id:
            return remove_dirs_chat(message.chat.id)

        if await is_admin_group(message.chat.id, message.bot.id):
            await bot.delete_message(message.chat.id, message.message_id)

        await message.answer("üçç [%s](tg://user?id=%d) –ø–æ–∫–∏–Ω—É–ª(-–∞) *%s*" % (message.left_chat_member.first_name, message.left_chat_member.id,message.chat.full_name), parse_mode="Markdown")
        
        if not os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):
            return True

        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
            record = game.read()
            
        if "ASSOCIATIONS" in record:
            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + temp) as player:
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + temp)
    except Exception as e:
        pass

# Command: start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    try:
        buttons  = [types.InlineKeyboardButton(text='–ò–≥—Ä—ã üìå', callback_data="–ò–≥—Ä—ã"),types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å ‚óÄ', callback_data="–ü–æ–º–æ—â—å")] 
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        return await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é - —è –ê–Ω–∞–Ω–∞—Å—ã—á üçç\n–ú–Ω–æ–≥–æ—Å–ø–æ—Å–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –≤–µ—Å–µ–ª—å—è!", reply_markup=keyboard)
    except Exception as e:
        print(repr(e))

# Bag command
@dp.message_handler(commands=['bag'])
async def mute_command(message: types.Message):
    try:
        text = message.text.split(" ")
        if len(text) < 2:
            return await message.reply("üçç *–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bag [–¢–µ–∫—Å—Ç]", parse_mode="Markdown")
            
        await message.reply("üçç –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        text = message.text.replace(text[0], "")
        message = "‚ö† *–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ*\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [%s](tg://user?id=%d)\n–ß–∞—Ç ID: %d\nUser ID: %d\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n%s" % (message.from_user.first_name,message.from_user.id,message.chat.id,message.from_user.id,text)
        await bot.send_message(DEVELOPER, message, parse_mode="Markdown")
    except Exception as e:
        pass 

# Admins commands
# Command: mute
@dp.message_handler(commands=['mute'])
async def mute_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await message.answer("üçç –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

        if not message.reply_to_message:
            return await message.reply("üçç –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if not await is_admin_group(message.chat.id, message.bot.id):
            return await bot.send_message(message.chat.id, "üçç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.reply_to_message.from_user.id == message.bot.id:
            return await message.reply("üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É...")

        if not await is_admin_group(message.chat.id, message.from_user.id):
            return await bot.delete_message(message.chat.id, message.message_id)

        if await is_admin_group(message.chat.id, message.reply_to_message.from_user.id):
            return await message.reply("üçç [%s](tg://user?id=%d) —è–≤–ª—è–µ—Ç—Å—è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")

        await message.answer("üçç [%s](tg://user?id=%d) *–Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç 30 –º–∏–Ω—É—Ç*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id,until_date=int(time.time()) + 60*30, can_send_messages=False, can_send_media_messages=False,
        can_send_polls=False, can_send_other_messages=False)
    except Exception as e:
        pass

# Command: Kick
@dp.message_handler(commands=['kick'])
async def kick_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await message.answer("üçç –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

        if not message.reply_to_message:
            return await message.reply("üçç –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if not await is_admin_group(message.chat.id, message.bot.id):
            return await bot.send_message(message.chat.id, "üçç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.reply_to_message.from_user.id == message.bot.id:
            return await message.reply("üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É...")

        if not await is_admin_group(message.chat.id, message.from_user.id):
            return await bot.delete_message(message.chat.id, message.message_id)

        if await is_admin_group(message.chat.id, message.reply_to_message.from_user.id):
            return await message.reply("üçç [%s](tg://user?id=%d) —è–≤–ª—è–µ—Ç—Å—è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")

        await bot.delete_message(message.chat.id, message.message_id)
        await message.answer("üçç [%s](tg://user?id=%d) *–∫–∏–∫–Ω—É–ª(-–∞)* [%s](tg://user?id=%d)" % (message.from_user.first_name,message.from_user.id,message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")
        await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    except Exception as e:
        pass 

# Games
# Command: Fanta
@dp.message_handler(commands=['fanta'])
async def fanta_command(message: types.Message):
    try:

        buttons  = [types.InlineKeyboardButton(text='–î–∞–ª—å—à–µ', callback_data="–î–∞–ª—å—à–µ")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        with open("info/fanta_message.txt", encoding="utf8") as fanta:
            mission = fanta.read().replace("\\n", "\n").split("|")

        select_mission = random.randint(0,len(mission)) - 1
        await message.reply("üçç %s" % mission[select_mission], parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:
        pass

# Command: hand
@dp.message_handler(commands=['hand'])
async def hand_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if is_game_in_chat(message.chat.id):
            if not await is_admin_group(message.chat.id, bot.id):
                return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")
            return await bot.delete_message(message.chat.id, message.message_id)

        verification_dirs_chat(message.chat.id)

        buttons  = [types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å üëç', callback_data="–†—É–∫–∞")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        step = await message.reply("üçç [%s](tg://user?id=%d) –∫–∏–¥–∞–µ—Ç –≤—ã–∑–æ–≤ –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞" % (message.from_user.first_name,message.from_user.id), parse_mode="Markdown", reply_markup=keyboard)
        await asyncio.sleep(20)
        if not os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/hand/" + str(step.message_id) + ".txt"):
            await bot.edit_message_text(chat_id=message.chat.id, message_id=step.message_id, text="üçç –ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å:(")
    except Exception as e:
        pass 

# Command: crosses
@dp.message_handler(commands=['crosses'])
async def crosses_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if is_game_in_chat(message.chat.id):
            if not await is_admin_group(message.chat.id, bot.id):
                return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")
            await bot.delete_message(message.chat.id, message.message_id)

        buttons  = [types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚öî', callback_data="–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        verification_dirs_chat(message.chat.id)

        step = await message.reply("üçç [%s](tg://user?id=%d) —Ö–æ—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏" % (message.from_user.first_name,message.from_user.id), parse_mode="Markdown", reply_markup=keyboard)        
        await asyncio.sleep(20)
        if not os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/crosses/" + str(step.message_id) + ".txt"):
            await bot.edit_message_text(chat_id=message.chat.id, message_id=step.message_id, text="üçç –ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å:(")
    except Exception as e:
        pass

# Help function crosses
def progress_to_win_crosses(check_pos):
    if check_pos[0] != 0 and check_pos[0] == check_pos[1] and check_pos[1] == check_pos[2]:
        return check_pos[0]
    elif check_pos[3] != 0 and check_pos[3] == check_pos[4] and check_pos[4] == check_pos[5]:
        return check_pos[3]
    elif check_pos[6] != 0 and check_pos[6] == check_pos[7] and check_pos[7] == check_pos[8]:
        return check_pos[6]
    elif check_pos[0] != 0 and check_pos[0] == check_pos[3] and check_pos[3] == check_pos[6]:
        return check_pos[0]
    elif check_pos[1] != 0 and check_pos[1] == check_pos[4] and check_pos[4] == check_pos[7]:
        return check_pos[1]
    elif check_pos[2] != 0 and check_pos[2] == check_pos[5] and check_pos[5] == check_pos[8]:
        return check_pos[2]
    elif check_pos[0] != 0 and check_pos[0] == check_pos[4] and check_pos[4] == check_pos[8]:
        return check_pos[0]
    elif check_pos[2] != 0 and check_pos[2] == check_pos[4] and check_pos[4] == check_pos[6]:
        return check_pos[2]
    elif check_pos[0] != 0 and check_pos[1] != 0 and check_pos[2] != 0 and check_pos[3] != 0 and check_pos[4] != 0 and check_pos[5] != 0 and check_pos[6] != 0 and check_pos[7] != 0 and check_pos[8] != 0:
        return 4
    return False

# Command: cities
@dp.message_handler(commands=['cities'])
async def crosses_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if is_game_in_chat(message.chat.id):
            if not await is_admin_group(message.chat.id, bot.id):
                return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")
            await bot.delete_message(message.chat.id, message.message_id)

        if not await is_admin_group(message.chat.id, bot.id):
            return await message.reply("üçç –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        verification_dirs_chat(message.chat.id)
        first_letter = choice(letters)

        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("CITIES|%s|0|0" % first_letter)

        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/cities.txt", "+w") as city:
            city.close()

        await bot.delete_message(message.chat.id, message.message_id)

        step = await message.answer("üçç *–ì–æ—Ä–æ–¥–∞*\n–ò–≥—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüìå –ë–æ—Ç –ø–∏—à–µ—Ç –±—É–∫–≤—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥\n–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±—É–¥–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É: *%s*" % first_letter, parse_mode="Markdown")        
        await asyncio.sleep(60)
        if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):
            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                record = game.read().split("|")

            if record[2] == "0":
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/cities.txt")
                return await bot.delete_message(message.chat.id, step.message_id)
    except Exception as e:
        pass   

# Command: charade
@dp.message_handler(commands=['charade'])
async def charade_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if is_game_in_chat(message.chat.id):
            if not await is_admin_group(message.chat.id, bot.id):
                return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")
            return await bot.delete_message(message.chat.id, message.message_id)

        if not await is_admin_group(message.chat.id, bot.id):
            return await message.reply("üçç –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        buttons = [types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data="–®–∞—Ä–∞–¥–∞")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        verification_dirs_chat(message.chat.id)

        await bot.delete_message(message.chat.id, message.message_id)
        step_first_message = await message.answer("üçç *–®–∞—Ä–∞–¥–∞*\n\n–ò–¥—ë—Ç –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", parse_mode="Markdown", reply_markup=keyboard)
        message.message_id = step_first_message.message_id
        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("CHARADE|REGISTER|%d" % message.message_id)

        await asyncio.sleep(60)
        players = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/charade")
        await bot.delete_message(message.chat.id, message.message_id)
        if not players or len(players) < 1:
            for temp in players:
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/charade/" + temp)

            os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
            return await message.answer("üçç *–®–∞—Ä–∞–¥–∞*\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤!", parse_mode="Markdown")

        index = choice(players)
        index = int(index.replace(".txt", ""))
        info = await bot.get_chat_member(message.chat.id, index)

        step_second = await message.answer("üçç *–®–∞—Ä–∞–¥–∞*\n–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n–°–ª–æ–≤–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–¥—É–º–∞—Ç—å: [%s](tg://user?id=%d)\n‚åõ –í—Ä–µ–º—è: 20 —Å–µ–∫—É–Ω–¥" % (info.user.first_name, index), parse_mode="Markdown")
        step_third = await bot.send_message(index, "üçç *–®–∞—Ä–∞–¥–∞*\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –º–Ω–µ", parse_mode="Markdown")

        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("CHARADE|NEED_WORD|%d|%d" % (index, message.message_id))

        await asyncio.sleep(20)
        if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):
            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                info = game.read().split("|")

            if info[0] == "CHARADE" and info[1] == "NEED_WORD":
                await bot.delete_message(message.chat.id, step_second.message_id)
                await bot.delete_message(index, step_third.message_id)
                await bot.send_message(message.chat.id,"üçç *–®–∞—Ä–∞–¥–∞*\n–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!\n\n–°–ª–æ–≤–æ –Ω–µ–±—ã–ª–æ –ø—Ä–∏–¥—É–º–∞–Ω–æ..", parse_mode="Markdown")
                players = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/charade")
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
                for temp in players:
                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/charade/" + temp)
                    os.remove(os.getcwd() + "/users/" + temp)
            
    except Exception as e:
        pass   

# Command: associations
@dp.message_handler(commands=['associations'])
async def associations_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if is_game_in_chat(message.chat.id):
            if not await is_admin_group(message.chat.id, bot.id):
                return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")
            return await bot.delete_message(message.chat.id, message.message_id)

        if not await is_admin_group(message.chat.id, bot.id):
            return await message.reply("üçç –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        with open("info/words_for_associations.txt", encoding="utf8") as game:
            words = game.read().split(",")

        POS_WORD = random.randint(0, len(words) - 1)

        verification_dirs_chat(message.chat.id)

        step_first_message = await bot.send_message(message.chat.id, "üçç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏\n\n[%s](tg://user?id=%d) –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É!\n\n‚úè –ü–∏—à–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∫ —Å–ª–æ–≤—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 120 —Å–µ–∫—É–Ω–¥\n‚ö° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ\n\n–°–ª–æ–≤–æ –¥–ª—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π: *%s*" % (message.from_user.first_name,message.from_user.id,words[POS_WORD]), parse_mode="Markdown")

        parse_words(message.chat.id, words[POS_WORD])

        with open("chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("ASSOCIATIONS")

        await asyncio.sleep(60)
        step_second_message = await bot.send_message(message.chat.id, "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–ª–æ–≤–æ: *%s*\n‚åõ–û—Å—Ç–∞–ª–æ—Å—å: 60 —Å–µ–∫—É–Ω–¥..." % words[POS_WORD], parse_mode="Markdown")

        await asyncio.sleep(30)
        step_third_message = await bot.send_message(message.chat.id, "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–ª–æ–≤–æ: *%s*\n‚åõ–û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥..." % words[POS_WORD], parse_mode="Markdown")

        await asyncio.sleep(30)
        dirs = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations")

        os.remove("chats/" + str(message.chat.id) + "/info.txt")
        os.remove("chats/" + str(message.chat.id) + "/parse.txt")

        if not dirs:
            if await is_admin_group(message.chat.id, bot.id):
                # Remove messages
                await bot.delete_message(message.chat.id, message.message_id)
                await bot.delete_message(message.chat.id, step_first_message.message_id)
                await bot.delete_message(message.chat.id, step_second_message.message_id)
                return await bot.delete_message(message.chat.id, step_third_message.message_id)

            return await bot.send_message(message.chat.id, "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", parse_mode="Markdown")

        game_message = "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        count = 1

        for item in dirs:
            if os.path.isfile("chats/" + str(message.chat.id) + "/associations/" + item):
                with open("chats/" + str(message.chat.id) + "/associations/" + item) as player:
                    score = int(player.read())

                os.remove("chats/" + str(message.chat.id) + "/associations/" + item)
                index = int(item.replace(".txt", ""))
                info = await bot.get_chat_member(message.chat.id, index)
                game_message += "%d. [%s](tg://user?id=%d) - ‚ö° %d –æ—á–∫–æ–≤.\n" % (count, info.user.first_name, index, score)
                count += 1

        return await bot.send_message(message.chat.id, game_message, parse_mode="Markdown")   

    except Exception as e:
        pass 

def parse_words(chat_id, word):
    try:
        desktop_agents = ['Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36',
                    'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36',
                    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36',
                    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14',
                    'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36',
                    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36',
                    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36',
                    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36',
                    'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36',
                    'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0']

        url = 'http://sinonim.org/as/%s' % word
        response = requests.get(url, headers={'User-Agent': choice(desktop_agents),'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'})
        soup = BeautifulSoup(response.text, 'lxml')
        sections = soup.find_all('ul', class_="assocPodryad")
        cases = soup.find_all('li')

        with open("chats/" + str(chat_id) + "/parse.txt", "+w") as parse:
            for item in cases:
                text = item.get_text()
                if "." not in text:
                    parse.write(text + ",")

    except Exception as e:
        pass

# Command: Leave
@dp.message_handler(commands=['leave'])
async def leave_command(message: types.Message):
    try:
        if os.path.isfile(os.getcwd() + "/users/" + str(message.from_user.id) + ".txt"):
            with open(os.getcwd() + "/users/" + str(message.from_user.id) + ".txt") as player:
                chat = int(player.read())

            os.remove(os.getcwd() + "/users/" + str(message.from_user.id) + ".txt")

            if os.path.isfile(os.getcwd() + "/chats/" + str(chat) + "/info.txt"):
                with open(os.getcwd() + "/chats/" + str(chat) + "/info.txt") as game:
                    game_result = game.read().split("|")

        return await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        pass

# Types: dice
@dp.message_handler(content_types=["dice"])
async def dice_message(message):
    if is_game_in_chat(message.chat.id) and message.chat.id != message.from_user.id:
        if not await is_admin_group(message.chat.id, bot.id):
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")
        return await bot.delete_message(message.chat.id, message.message_id)

    if message.dice.emoji == "üèÄ" and message.dice.value > 3:
        await asyncio.sleep(4)
        success = ["–®–∏–∫–∞—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫!", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –±—Ä–æ—Å–æ–∫!", "–û—Ç–ª–∏—á–Ω—ã–π –±—Ä–æ—Å–æ–∫!", "–•–æ—Ä–æ—à–∏–π –±—Ä–æ—Å–æ–∫!", "–ó–¥–æ—Ä–æ–≤–æ –ø–æ–ø–∞–¥–∞–µ—à—å!", "–ß—Ç–æ-–∂–µ, —Ç—ã –º–æ–ª–æ–¥–µ—Ü!", "–£—Ö —Ç—ã, –∫—Ä–∞—Å–∞–≤–∞!"]
        return await message.reply("üçç *%s*" % choice(success), parse_mode="Markdown")
    
    if message.dice.emoji == "üé≤":
        await asyncio.sleep(5)
        return await message.reply("üçç *–ö—É–±–∏–∫\n–í—ã–ø–∞–ª–æ: %d*" % (message.dice.value), parse_mode="Markdown")

    if message.dice.emoji == "üéØ":
        await asyncio.sleep(3)
        if message.dice.value == 6:
            return await message.reply("üçç *–£—Ö —Ç—ã, –ø—Ä—è–º–æ –≤ —è–±–ª–æ—á–∫–µ*", parse_mode="Markdown")

        if message.dice.value == 5:
            return await message.reply("üçç *–ù—É—É –ø–æ—á—Ç–∏ –≤ —è–±–ª–æ—á–∫–æ*", parse_mode="Markdown")

        if message.dice.value == 4:
            return await message.reply("üçç *–ë—ã–ª–æ –±–ª–∏–∑–∫–æ..*", parse_mode="Markdown")

        if message.dice.value == 3 or message.dice.value == 2:
            return await message.reply("üçç *–°—Ç–∞—Ä–∞–π—Å—è –ª—É—á—à–µ..*", parse_mode="Markdown")

        else: 
            return await message.reply("üçç *–î–ª—è –ø—Ä–∏–ª–∏—á–∏—è, –º–æ–≥(-–ª–∞) –±—ã –∏ –ø–æ–ø–∞—Å—Ç—å..*", parse_mode="Markdown")

    if message.dice.emoji == "‚öΩ" and message.dice.value >= 3:
        await asyncio.sleep(4)
        success = ["–®–∏–∫–∞—Ä–Ω—ã–π —É–¥–∞—Ä!", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π —É–¥–∞—Ä!", "–û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä!", "–•–æ—Ä–æ—à–∏–π —É–¥–∞—Ä!", "–ó–¥–æ—Ä–æ–≤–æ –ø–æ–ø–∞–¥–∞–µ—à—å!", "–¢—ã –∫–∞–∫ —Ä–æ–Ω–∞–ª–¥—É!", "–•–æ—Ä–æ—à–∏–π —É–¥–∞—Ä, '–º–µ—Å—Å–∏'.."]
        return await message.reply("üçç *%s*" % choice(success), parse_mode="Markdown")

    if message.dice.emoji == "üé≥":
        await asyncio.sleep(3)
        if message.dice.value == 6:
            return await message.reply("üçç *–ë–æ—É–ª–∏–Ω–≥\n–°—Ç—Ä–∞–π–∫! –û—Ç–ª–∏—á–Ω—ã–π –±—Ä–æ—Å–æ–∫*", parse_mode="Markdown")

        elif message.dice.value == 1:
            return await message.reply("üçç *–ë–æ—É–ª–∏–Ω–≥\n–ß—Ç–æ-–∂–µ –º–æ–∂–Ω–æ –∏ –ø–æ–ø–∞—Å—Ç—å*..", parse_mode="Markdown")

        else:
            return await message.reply("üçç *–ë–æ—É–ª–∏–Ω–≥\n–ü–æ—á—Ç–∏ —Å—Ç—Ä–∞–π–∫:)*", parse_mode="Markdown")

# Types: text
@dp.message_handler(content_types=["text"])
async def check_all_messages(message):
    try:
        with open(os.getcwd() + "/info/bad_words.txt", encoding="utf8") as bad_words:
            text = bad_words.read().split(" ")

        for temp in text:
            if temp in message.text.lower():
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("ü§¨ –ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è!")

        if message.from_user.id not in last_time:
            last_time[message.from_user.id] = time.time()
        else:
            if (time.time() - last_time[message.from_user.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
            last_time[message.from_user.id] = time.time()

        if message.chat.id == message.from_user.id:
            if os.path.isfile(os.getcwd() + "/users/" + str(message.from_user.id) + ".txt"):
                with open(os.getcwd() + "/users/" + str(message.from_user.id) + ".txt") as player:
                    chat = player.read()

                if os.path.isfile(os.getcwd() + "/chats/" + chat + "/info.txt"):
                    with open(os.getcwd() + "/chats/" + chat + "/info.txt") as game:
                        info = game.read().split("|")

                    if int(info[2]) == message.from_user.id and info[1] == "NEED_WORD":
                        if "|" in message.text:
                            return await message.reply("üçç *–®–∞—Ä–∞–¥–∞*\n–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤!", parse_mode="Markdown")
                        with open(os.getcwd() + "/chats/" + chat + "/info.txt", "+w") as game:
                            game.write("%s|%s|%s|%s|0" % (info[0],message.text,info[2],info[3]))

                        await bot.send_message(int(chat), "üçç *–®–∞—Ä–∞–¥–∞*\n–°–ª–æ–≤–æ –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ!\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á—Ç–æ–±—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ!\n\n‚åõ –í—Ä–µ–º—è –∏–≥—Ä—ã: *5 –º–∏–Ω—É—Ç*", parse_mode="Markdown")
                        await message.reply("üçç *–®–∞—Ä–∞–¥–∞*\n–û—Ç–ª–∏—á–Ω–æ–µ —Å–ª–æ–≤–æ!\n–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", parse_mode="Markdown")
                        await asyncio.sleep(120)
                        if os.path.isfile(os.getcwd() + "/chats/" + chat + "/info.txt"):
                            with open(os.getcwd() + "/chats/" + chat + "/info.txt") as game:
                                records = game.read().split("|")
                            
                            if int(records[2]) == message.from_user.id and message.text == records[1]:
                                await bot.send_message(int(chat), "üçç *–®–∞—Ä–∞–¥–∞*\n‚åõ –û—Å—Ç–∞–ª–æ—Å—å: *3 –º–∏–Ω—É—Ç—ã*", parse_mode="Markdown")
                            else:
                                return True
                        await asyncio.sleep(120)
                        if os.path.isfile(os.getcwd() + "/chats/" + chat + "/info.txt"):
                            with open(os.getcwd() + "/chats/" + chat + "/info.txt") as game:
                                records = game.read().split("|")
                            
                            if int(records[2]) == message.from_user.id and message.text == records[1]:
                                await bot.send_message(int(chat), "üçç *–®–∞—Ä–∞–¥–∞*\n‚åõ –û—Å—Ç–∞–ª–æ—Å—å: *1 –º–∏–Ω—É—Ç–∞*", parse_mode="Markdown")
                            else:
                                return True
                        await asyncio.sleep(60)
                        if os.path.isfile(os.getcwd() + "/chats/" + chat + "/info.txt"):
                            with open(os.getcwd() + "/chats/" + chat + "/info.txt") as game:
                                records = game.read().split("|")
                            
                            if int(records[2]) == message.from_user.id and message.text == records[1]:
                                await bot.send_message(int(chat), "üçç *–®–∞—Ä–∞–¥–∞*\n‚åõ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!\n\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: %s" % message.text.upper(), parse_mode="Markdown")
                            else:
                                return True

        if not is_game_in_chat(message.chat.id) and message.chat.id != message.from_user.id:
            return True

        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
            game_text = game.read()

        if "CHARADE" in game_text:

            info = game_text.split("|")
            if int(info[2]) == message.from_user.id and message.text.lower() in info[1].lower():
                return await bot.delete_message(message.chat.id, message.message_id)

            if int(info[2]) == message.from_user.id:
                return True

            if info[1].lower() in message.text.lower() and int(info[2]) != message.from_user.id:
                await message.reply("üçç *–®–∞—Ä–∞–¥–∞*\n*–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!*\n\n–ú–æ–ª–æ–¥–µ—Ü! –°–ª–æ–≤–æ –±—ã–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ", parse_mode="Markdown")
                players = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/charade")
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
                for temp in players:
                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/charade/" + temp)
                    os.remove(os.getcwd() + "/users/" + temp)
                return True

            buttons = [types.InlineKeyboardButton(text='–î–∞', callback_data="–í–µ—Ä–Ω—ã–º"), types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data="–ù–µ –≤–µ—Ä–Ω—ã–º"), types.InlineKeyboardButton(text='–ù–∞–≤–µ—Ä–Ω–æ–µ', callback_data="–í–æ–∑–º–æ–∂–Ω—ã–º")] 
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            return await message.reply("üçç *–®–∞—Ä–∞–¥–∞*\n–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?", parse_mode="Markdown", reply_markup=keyboard)

        if "CITIES" in game_text:
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(message.text)
            status = observation.weather
            city = message.text.upper() 
            first_letter = city[:1]
            last_letter = city.replace(city[:-1], "")

            FIND = False
            for temp in letters:
                if temp == last_letter:
                    FIND = True
                    break

            if not FIND:
                last_letter = city.replace(city[:len(city) - 2], "").replace(last_letter, "")

            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                records = game.read().split("|")

            if int(records[2]) == message.from_user.id or first_letter != records[1]:
                return True

            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/cities.txt") as city:
                cities = city.read()

            result = cities.split(" ")
            for temp in result:
                if temp.lower() == message.text.lower():
                    return await message.reply("üçç *–ì–æ—Ä–æ–¥–∞*\n\n–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª!", parse_mode="Markdown")

            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/cities.txt", "+w") as city:
                city.write(cities + message.text + " ")

            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
                game.write("CITIES|%s|%d|%d" % (last_letter, message.from_user.id, int(records[3]) + 1))

            await message.reply("üçç *–ì–æ—Ä–æ–¥–∞*\n–ì–æ—Ä–æ–¥ *%s* –∑–∞—Å—á–∏—Ç–∞–Ω–æ\n\nüìå –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É - *%s*\n‚åõ –•–æ–¥: *60 —Å–µ–∫—É–Ω–¥*" % (message.text, last_letter), parse_mode="Markdown")
            
            await asyncio.sleep(60)
            if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):

                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                    record = game.read().split("|")

                if int(record[2]) == message.from_user.id and int(record[3]) == int(records[3]) + 1:
                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/cities.txt")

                    try:
                        info = await bot.get_chat_member(message.chat.id, message.from_user.id)
                        await message.answer("üçç *–ì–æ—Ä–æ–¥–∞*\n–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:\n[%s](tg://user?id=%d) - üëë" % (info.user.first_name, message.from_user.id), parse_mode="Markdown")
                    except Exception as e:
                        await message.answer("üçç *–ì–æ—Ä–æ–¥–∞*\n–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!\n\n–ë–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –≥–æ—Ä–æ–¥", parse_mode="Markdown")

        if "ASSOCIATIONS" in game_text:

            with open("chats/" + str(message.chat.id) + "/parse.txt") as parse:
                text = parse.read()

            text_split = text.split(",")

            for item in text_split:
                if message.text.lower() == item:
                    with open("chats/" + str(message.chat.id) + "/parse.txt", "+w") as parse:
                        parse.write(text.replace(message.text.lower() + ",", ""))

                    await message.reply("üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n\n–°–ª–æ–≤–æ *%s* –∑–∞—Å—á–∏—Ç–∞–Ω–æ\n‚ö° *+%d –æ—á–∫–æ–≤*" % (message.text, len(message.text) / 2), parse_mode="Markdown")  
                    if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt"):
                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt") as player:
                            score = int(player.read())

                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt" , "+w") as player:
                            player.write(str(score + int(len(message.text) / 2)))
                    else:
                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt" , "+w") as player:
                            player.write(str(int(len(message.text) / 2)))

    except Exception as e:
        print(repr(e))

# Types: callback keyboard
@dp.callback_query_handler(lambda callback_query: True)
async def some_callback_handler(callback_query: types.CallbackQuery):
    try:
        code = callback_query.data
        if code == "–í–µ—Ä–Ω—ã–º" or code == "–ù–µ –≤–µ—Ä–Ω—ã–º" or code == "–í–æ–∑–º–æ–∂–Ω—ã–º":

            if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/info.txt"):
                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/info.txt") as game:
                    info = game.read().split("|")

                if int(info[2]) == callback_query.from_user.id:
                    return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="üçç *–®–∞—Ä–∞–¥–∞*\n[%s](tg://user?id=%d) —Å—á–∏—Ç–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - *%s*" % (callback_query.from_user.first_name,callback_query.from_user.id,code), parse_mode="Markdown")

        elif code == "–ò–≥—Ä—ã":

            message = "üçç *–ò–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–µ:*\n/crosses - –ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n/associations - –ò–≥—Ä–∞ –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏\n/cities - –ò–≥—Ä–∞ –≤ –ì–æ—Ä–æ–¥–∞\n/hand - –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\n/charade - –ò–≥—Ä–∞ –≤ —à–∞—Ä–∞–¥—É\n\nüçç *–û—Å—Ç–∞–ª—å–Ω–æ–µ:*\n/fanta - –ò–≥—Ä–∞ –¥–ª—è '–∫—É–ª—å—Ç—É—Ä–Ω–æ–π' –ø–æ—Å–∏–¥–µ–ª–∫–∏ üîû\n\nüçç *–°—Ç–∏–∫–µ—Ä—ã:*\nüèÄ - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º—è—á\nüé≤ - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å\nüéØ - –î–∞—Ä—Ç—Å\n‚öΩ - –ü–Ω—É—Ç—å –º—è—á\nüé≥ - –ö–∏–Ω—É—Ç—å —à–∞—Ä"
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=None)
        
        elif code == "–ü–æ–º–æ—â—å":

            message = "üçç *–ü–æ–º–æ—â—å*\n\n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\nüìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */bag [–¢–µ–∫—Å—Ç]*"
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=None)

        elif code == "–®–∞—Ä–∞–¥–∞":

            if os.path.isfile(os.getcwd() + "/users/" + str(callback_query.from_user.id) + ".txt"):
                with open(os.getcwd() + "/users/" + str(callback_query.from_user.id) + ".txt") as player:
                    info = player.read()

                    if info == str(callback_query.message.chat.id):
                        return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!", show_alert=True)
                
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!", show_alert=True)
            else:
                try:
                    await bot.send_message(callback_query.from_user.id, "üçç *–®–∞—Ä–∞–¥–∞*\n–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ *%s*" % callback_query.message.chat.full_name, parse_mode="Markdown")
                except Exception as e:
                    return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π, —á—Ç–æ–±—ã –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–æ!", show_alert=True)

                with open(os.getcwd() + "/users/" + str(callback_query.from_user.id) + ".txt", "+w") as player:
                    player.write(str(callback_query.message.chat.id))

                game_message = "üçç *–®–∞—Ä–∞–¥–∞*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/charade/" + str(callback_query.from_user.id) + ".txt", "+w") as player:
                    player.close()

                players = os.listdir(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/charade")
                count = 0
                for temp in players:
                    try:
                        index = int(temp.replace(".txt", ""))
                        info = await bot.get_chat_member(callback_query.message.chat.id, index)

                        game_message += "[%s](tg://user?id=%d)\n" % (info.user.first_name, index)
                        count += 1
                    except Exception as e:
                        os.remove(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/charade/" + temp)
            
            buttons  = [types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data="–®–∞—Ä–∞–¥–∞")] 
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            game_message += "\n–ò—Ç–æ–≥–æ *%d* —á–µ–ª." % count
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)

        elif code == "–†—É–∫–∞":

            if callback_query.from_user.id == callback_query.message.reply_to_message.from_user.id:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –≠—Ç–æ –≤–∞—à –≤—ã–∑–æ–≤...", show_alert=True)

            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                game.write("%d|%s|%d|%s|None|None" % (callback_query.message.reply_to_message.from_user.id, callback_query.message.reply_to_message.from_user.first_name, callback_query.from_user.id, callback_query.from_user.first_name))

            buttons = [types.InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å", callback_data="–ö–∞–º–µ–Ω—å"),types.InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="–ù–æ–∂–Ω–∏—Ü—ã"),types.InlineKeyboardButton(text="–ë—É–º–∞–≥–∞", callback_data="–ë—É–º–∞–≥–∞")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            game_message = "üçç *–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç..*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d)\n2Ô∏è‚É£ [%s](tg://user?id=%d)\n\n‚åõ –•–æ–¥: *60 —Å–µ–∫—É–Ω–¥*" % (callback_query.from_user.first_name, callback_query.from_user.id, callback_query.message.reply_to_message.from_user.first_name, callback_query.message.reply_to_message.from_user.id)
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)
        elif code == "–ö–∞–º–µ–Ω—å" or code == "–ù–æ–∂–Ω–∏—Ü—ã" or code =="–ë—É–º–∞–≥–∞":

            if not os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt"):
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt") as game:
                result = game.read().split("|")

            if int(result[0]) != callback_query.from_user.id and int(result[2]) != callback_query.from_user.id:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ö–æ–¥–∏—Ç—å", show_alert=True)

            buttons = [types.InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å", callback_data="–ö–∞–º–µ–Ω—å"),types.InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="–ù–æ–∂–Ω–∏—Ü—ã"),types.InlineKeyboardButton(text="–ë—É–º–∞–≥–∞", callback_data="–ë—É–º–∞–≥–∞")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            if int(result[0]) == callback_query.from_user.id and result[4] == "None":
                result[4] = code
            elif int(result[2]) == callback_query.from_user.id and result[5] == "None":
                result[5] = code

            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                game.write("%s|%s|%s|%s|%s|%s" % (result[0], result[1], result[2], result[3], result[4], result[5]))
            
            game_message = "üçç *–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç..*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d)\n2Ô∏è‚É£ [%s](tg://user?id=%d)\n\n‚åõ –•–æ–¥: *60 —Å–µ–∫—É–Ω–¥*\n‚ñ∂ [%s](tg://user?id=%d) - —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥" % (result[1], int(result[0]), result[3], int(result[2]), callback_query.from_user.first_name, callback_query.from_user.id)
            if result[4] != "None" and result[5] != "None":
                os.remove(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt")
                keyboard = None
                if result[4] == result[5]:
                    game_message = "üçç *–ù–∏—á—å—è*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n2Ô∏è‚É£ [%s](tg://user?id=%d) - %s" % (result[1], int(result[0]), result[4], result[3], int(result[2]), result[5])
                elif result[4] == "–ö–∞–º–µ–Ω—å" and result[5] == "–ù–æ–∂–Ω–∏—Ü—ã" or result[4] == "–ë—É–º–∞–≥–∞" and result[5] == "–ö–∞–º–µ–Ω—å" or result[4] == "–ù–æ–∂–Ω–∏—Ü—ã" and result[5] == "–ë—É–º–∞–≥–∞":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n2Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:*\n[%s](tg://user?id=%d) - üëë" % (result[1], int(result[0]), result[4], result[3], int(result[2]), result[5], result[1], int(result[0]))
                elif result[5] == "–ö–∞–º–µ–Ω—å" and result[4] == "–ù–æ–∂–Ω–∏—Ü—ã" or result[5] == "–ë—É–º–∞–≥–∞" and result[4] == "–ö–∞–º–µ–Ω—å" or result[5] == "–ù–æ–∂–Ω–∏—Ü—ã" and result[4] == "–ë—É–º–∞–≥–∞":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n2Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:*\n[%s](tg://user?id=%d) - üëë" % (result[1], int(result[0]), result[4], result[3], int(result[2]), result[5], result[3], int(result[2]))

            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)

        elif code == "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏":

            if callback_query.from_user.id == callback_query.message.reply_to_message.from_user.id:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∏–≥—Ä—ã...", show_alert=True)

            buttons = [types.InlineKeyboardButton(text="‚è∫", callback_data="1"),types.InlineKeyboardButton(text="‚è∫", callback_data="2"),types.InlineKeyboardButton(text="‚è∫", callback_data="3"),
            types.InlineKeyboardButton(text="‚è∫", callback_data="4"),types.InlineKeyboardButton(text="‚è∫", callback_data="5"),types.InlineKeyboardButton(text="‚è∫", callback_data="6"),
            types.InlineKeyboardButton(text="‚è∫", callback_data="7"),types.InlineKeyboardButton(text="‚è∫", callback_data="8"),types.InlineKeyboardButton(text="‚è∫", callback_data="9")]
            keyboard = types.InlineKeyboardMarkup(row_width=3)
            keyboard.add(*buttons)

            message = "üçç –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚åõ –ù–∞ —Ö–æ–¥: *60 —Å–µ–∫—É–Ω–¥*\n\n‚ùå [%s](tg://user?id=%d) —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏\n‚≠ï [%s](tg://user?id=%d) —Ö–æ–¥–∏—Ç –Ω–æ–ª–∏–∫–∞–º–∏\n\n–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: [%s](tg://user?id=%d) ‚ùå" % (callback_query.message.reply_to_message.from_user.first_name, callback_query.message.reply_to_message.from_user.id, callback_query.from_user.first_name, callback_query.from_user.id, callback_query.message.reply_to_message.from_user.first_name, callback_query.message.reply_to_message.from_user.id)
            await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=keyboard)
    
            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                game.write("%d|%s|%d|%s|CROSS|1|0|0|0|0|0|0|0|0|0" % (callback_query.message.reply_to_message.from_user.id, callback_query.message.reply_to_message.from_user.first_name, callback_query.from_user.id, callback_query.from_user.first_name))

            await asyncio.sleep(60)
            if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt"):
                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt") as game:
                    game_split = game.read().split("|")

                if int(game_split[5]) == 1:
                    message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%d) - –ù–µ —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥\n‚≠ï [%s](tg://user?id=%d)" % (callback_query.message.reply_to_message.from_user.first_name, callback_query.message.reply_to_message.from_user.id, callback_query.from_user.first_name, callback_query.from_user.id)
                    return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=None)

        elif code == "1" or code == "2" or code == "3" or code == "4" or code == "5" or code == "6" or code == "7" or code == "8" or code == "9":
            if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt"):                 
                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt") as game:
                    game_info = game.read().split("|")

                if (callback_query.from_user.id == int(game_info[0]) and game_info[4] == "CROSS") or (callback_query.from_user.id == int(game_info[2]) and game_info[4] == "ZERO"):
                    # Variables
                    position = int(code) - 1
                    keyboard_text = ["‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫"]
                    callback_post = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
                    crosses_position = []
                    game_message = ""
                    write_to_txt = ""

                    for i in range(9):
                        crosses_position.append(int(game_info[i+6]))

                    if callback_query.from_user.id == int(game_info[0]) and game_info[4] == "CROSS":
                        game_message = "üçç –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚åõ –ù–∞ —Ö–æ–¥: *60 —Å–µ–∫—É–Ω–¥*\n\n‚ùå [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏\n‚≠ï [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –Ω–æ–ª–∏–∫–∞–º–∏\n\n–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: [%s](tg://user?id=%s) ‚≠ï" % (game_info[1], game_info[0], game_info[3], game_info[2], game_info[3], game_info[2])
                        crosses_position[position] = 2
                        write_to_txt = "%s|%s|%s|%s|ZERO|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d" % (game_info[0], game_info[1], game_info[2], game_info[3], int(game_info[5]) + 1, crosses_position[0],crosses_position[1],crosses_position[2],crosses_position[3],crosses_position[4],crosses_position[5],crosses_position[6],crosses_position[7],crosses_position[8])
                    else:
                        game_message = "üçç –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚åõ –ù–∞ —Ö–æ–¥: *60 —Å–µ–∫—É–Ω–¥*\n\n‚ùå [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏\n‚≠ï [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –Ω–æ–ª–∏–∫–∞–º–∏\n\n–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: [%s](tg://user?id=%s) ‚ùå" % (game_info[1], game_info[0], game_info[3], game_info[2], game_info[1], game_info[0])
                        crosses_position[position] = 3
                        write_to_txt = "%s|%s|%s|%s|CROSS|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d" % (game_info[0], game_info[1], game_info[2], game_info[3], int(game_info[5]) + 1, crosses_position[0],crosses_position[1],crosses_position[2],crosses_position[3],crosses_position[4],crosses_position[5],crosses_position[6],crosses_position[7],crosses_position[8])
                    
                    with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                        game.write(write_to_txt)

                    for i in range(9):
                        if crosses_position[i] == 2:
                            keyboard_text[i] = "‚ùå"
                            callback_post[i] = "–í—ã–±—Ä–∞–Ω–æ"
                        elif crosses_position[i] == 3:
                            keyboard_text[i] = "‚≠ï"
                            callback_post[i] = "–í—ã–±—Ä–∞–Ω–æ" 

                    buttons = [types.InlineKeyboardButton(text=keyboard_text[0], callback_data=callback_post[0]),types.InlineKeyboardButton(text=keyboard_text[1], callback_data=callback_post[1]),types.InlineKeyboardButton(text=keyboard_text[2], callback_data=callback_post[2]),
                    types.InlineKeyboardButton(text=keyboard_text[3], callback_data=callback_post[3]),types.InlineKeyboardButton(text=keyboard_text[4], callback_data=callback_post[4]),types.InlineKeyboardButton(text=keyboard_text[5], callback_data=callback_post[5]),
                    types.InlineKeyboardButton(text=keyboard_text[6], callback_data=callback_post[6]),types.InlineKeyboardButton(text=keyboard_text[7], callback_data=callback_post[7]),types.InlineKeyboardButton(text=keyboard_text[8], callback_data=callback_post[8])]
                    keyboard = types.InlineKeyboardMarkup(row_width=3)
                    keyboard.add(*buttons)

                    if progress_to_win_crosses(crosses_position) == 2:
                        game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s) - üëë\n‚≠ï [%s](tg://user?id=%s)" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                        keyboard = None
                    elif progress_to_win_crosses(crosses_position) == 3:
                        game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s)\n‚≠ï [%s](tg://user?id=%s) - üëë" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                        keyboard = None
                    elif progress_to_win_crosses(crosses_position) == 4:
                        game_message = "üçç *–ù–∏—á—å—è!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s)\n‚≠ï [%s](tg://user?id=%s)" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                        keyboard = None

                    if keyboard is None:
                        os.remove(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt")

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)
                    if keyboard is not None:
                        try:
                            await asyncio.sleep(60)
                            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt") as game:
                                game_info_next = game.read().split("|")

                            if int(game_info_next[5]) == int(game_info[5]) + 1:
                                if game_info_next[4] == "CROSS":
                                    game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s) - –ù–µ —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥\n‚≠ï [%s](tg://user?id=%s)" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                                else:
                                    game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s)\n‚≠ï [%s](tg://user?id=%s) - –ù–µ —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                                keyboard = None
                                await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)
                        except FileNotFoundError:
                            return False

            else:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.", show_alert=True)
        elif code == "–í—ã–±—Ä–∞–Ω–æ":

            return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)

        elif code == "–î–∞–ª—å—à–µ":

            buttons  = [types.InlineKeyboardButton(text='–î–∞–ª—å—à–µ', callback_data="–î–∞–ª—å—à–µ")] 
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            with open("info/fanta_message.txt", encoding="utf8") as fanta:
                mission = fanta.read().replace("\\n", "\n").split("|")

            select_mission = random.randint(0,len(mission)) - 1
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="üçç %s" % mission[select_mission], parse_mode="Markdown",reply_markup=keyboard)
    except Exception as e:
        print(repr(e)) 

if __name__ == "__main__":
    if not os.path.isdir("chats"):
            os.mkdir("chats")

    if not os.path.isdir("users"):
        os.mkdir("users")

    chats = os.listdir(os.getcwd() + "/chats")
    for temp in chats:
        try:
            file = os.getcwd() + "/chats/" + temp + "/info.txt"
            with open(os.getcwd() + "/chats/" + temp + "/info.txt") as game:
                result = game.read()

            if "ASSOCIATIONS" in result:
                players = os.listdir(os.getcwd() + "/chats/" + temp + "/associations")
                for item in players:
                    os.remove(os.getcwd() + "/chats/" + temp + "/associations/" + item)

            if "CITIES" in result:
                os.remove(os.getcwd() + "/chats/" + temp + "/cities.txt")

            os.remove(os.getcwd() + "/chats/" + temp + "/info.txt")
        except Exception as e:
            continue

    executor.start_polling(dp, skip_updates=True)

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import random
from random import choice

import requests
import os
import asyncio
import time

from pyowm import OWM
from pyowm.utils.config import get_default_config

from bs4 import BeautifulSoup
from config import TOKEN,API_KEY

import pymorphy2
morph = pymorphy2.MorphAnalyzer()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
owm = OWM(API_KEY)

letters = ["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–ñ", "–ò", "–ö", "–õ", "–ú", "–ù", "–û", "–ü", "–†", "–°", "–¢", "–£", "–§", "–•", "–¶", "–ß", "–©", "–Ø"]
not_spam_commands = {}

# Check have user admin in group
async def is_admin_group(chat_id, user_id):
    try:
        result = await bot.get_chat_member(chat_id, user_id)
        if "administrator" in result["status"] or "creator" in result["status"]:
            return True
        return False
    except Exception as e:
        print(repr(e))
        
# Check game in chat
def is_game_in_chat(chat_id):
    try:
        if os.path.isfile(os.getcwd() + "/chats/" + str(chat_id) + "/" + "info.txt"):
            return True
        return False
    except Exception as e:
        print(repr(e))

# Check dirs 
def verification_dirs_chat(chat_id):
    try:
        path = os.path.join(os.getcwd() + "/chats", str(chat_id))
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "crosses")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "associations")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "hand")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "titles")
        if not os.path.exists(path):
            os.mkdir(path)

        path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "scallop")
        if not os.path.exists(path):
            os.mkdir(path)

    except Exception as e:
        print(repr(e))

# Remove dirs
def remove_dirs_chat(chat_id):
    try:
        path = os.path.join(os.getcwd() + "/chats", str(chat_id))

        if os.path.exists(path):

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "crosses")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/crosses")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/crosses/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/crosses")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "associations")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/associations")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/associations/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/associations")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "hand")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/hand")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/hand/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/hand")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "titles")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/titles")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/titles/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/titles")

            path = os.path.join(os.getcwd() + "/chats/" + str(chat_id), "scallop")
            if os.path.exists(path):
                files = os.listdir(os.getcwd() + "/chats/" + str(chat_id) + "/scallop")
                if files:
                    for temp in files:
                        os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/scallop/" + temp)
                os.rmdir(os.getcwd() + "/chats/" + str(chat_id) + "/scallop")

            files = os.listdir(os.getcwd() + "/chats/" + str(chat_id))
            if files:
                for temp in files:
                    os.remove(os.getcwd() + "/chats/" + str(chat_id) + "/" + temp)

            return os.rmdir(os.getcwd() + "/chats/" + str(chat_id))

    except Exception as e:
        print(repr(e))

# Type: new member
@dp.message_handler(content_types=["new_chat_members"])
async def new_chat_members_delete(message):
    try:
        if await is_admin_group(message.chat.id, message.bot.id):
            await bot.delete_message(message.chat.id, message.message_id)
            
        if message.new_chat_members[0].id == bot.id:
            verification_dirs_chat(message.chat.id)

            buttons  = [types.InlineKeyboardButton(text='–ò–≥—Ä—ã üìå', callback_data="–ò–≥—Ä—ã"),types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å ‚óÄ', callback_data="–ü–æ–º–æ—â—å")] 
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            return await message.answer("üçç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, –≥–æ—Å–ø–æ–¥–∞!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç - *–ê–Ω–∞–Ω–∞—Å—ã—á*\n–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç\n\n–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ:\nüíæ –ò–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã\nüëÆ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º\nüîî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç\n\n_–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã–¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞_", parse_mode="Markdown", reply_markup=keyboard)
        
        return await message.answer("üçç[%s](tg://user?id=%d), *–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ %s*" % (message.new_chat_members[0].first_name, message.new_chat_members[0].id,message.chat.full_name), parse_mode="Markdown")
    except Exception as e:
        print(repr(e))

# Type: left member
@dp.message_handler(content_types=["left_chat_member"])
async def new_chat_members_delete(message):
    try:
        if message.left_chat_member.id == bot.id:
            return remove_dirs_chat(message.chat.id)

        if await is_admin_group(message.chat.id, message.bot.id):
            await bot.delete_message(message.chat.id, message.message_id)

        await message.answer("üçç [%s](tg://user?id=%d) –ø–æ–∫–∏–Ω—É–ª(-–∞) *%s*" % (message.left_chat_member.first_name, message.left_chat_member.id,message.chat.full_name), parse_mode="Markdown")
        
        if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):
            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                record = game.read()
            
            if "ASSOCIATIONS" in record:
                if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):
                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt")

    except Exception as e:
        print(repr(e))

# Command: start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    try:
        if is_game_in_chat(message.chat.id):
            if await is_admin_group(message.chat.id, bot.id):
                return await bot.delete_message(message.chat.id, message.message_id)
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")

        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        buttons  = [types.InlineKeyboardButton(text='–ò–≥—Ä—ã üìå', callback_data="–ò–≥—Ä—ã"),types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å ‚óÄ', callback_data="–ü–æ–º–æ—â—å")] 
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)

        return await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é - —è –ê–Ω–∞–Ω–∞—Å—ã—á üçç\n–ú–Ω–æ–≥–æ—Å–ø–æ—Å–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –≤–µ—Å–µ–ª—å—è!", reply_markup=keyboard)
    except Exception as e:
        print(repr(e))

# Admins commands
# Command: mute
@dp.message_handler(commands=['mute'])
async def mute_command(message: types.Message):
    try:
        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if message.chat.id == message.from_user.id:
            return await message.answer("üçç –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

        if not message.reply_to_message:
            return await message.reply("üçç –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if not await is_admin_group(message.chat.id, message.bot.id):
            return await bot.send_message(message.chat.id, "üçç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.reply_to_message.from_user.id == message.bot.id:
            return await message.reply("üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É...")

        if not await is_admin_group(message.chat.id, message.from_user.id):
            return await bot.delete_message(message.chat.id, message.message_id)

        if await is_admin_group(message.chat.id, message.reply_to_message.from_user.id):
            return await message.reply("üçç [%s](tg://user?id=%d) —è–≤–ª—è–µ—Ç—Å—è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")

        await message.answer("üçç [%s](tg://user?id=%d) *–Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç 30 –º–∏–Ω—É—Ç*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id,until_date=int(time.time()) + 60*30, permissions={'can_send_messages': False})
    except Exception as e:
        print(repr(e))

# Command: Kick
@dp.message_handler(commands=['kick'])
async def kick_command(message: types.Message):
    try:
        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if message.chat.id == message.from_user.id:
            return await message.answer("üçç –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

        if not message.reply_to_message:
            return await message.reply("üçç –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if not await is_admin_group(message.chat.id, message.bot.id):
            return await bot.send_message(message.chat.id, "üçç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.reply_to_message.from_user.id == message.bot.id:
            return await message.reply("üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É...")

        if not await is_admin_group(message.chat.id, message.from_user.id):
            return await bot.delete_message(message.chat.id, message.message_id)

        if await is_admin_group(message.chat.id, message.reply_to_message.from_user.id):
            return await message.reply("üçç [%s](tg://user?id=%d) —è–≤–ª—è–µ—Ç—Å—è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*" % (message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")

        await bot.delete_message(message.chat.id, message.message_id)
        await message.answer("üçç [%s](tg://user?id=%d) *–∫–∏–∫–Ω—É–ª(-–∞)* [%s](tg://user?id=%d)" % (message.from_user.first_name,message.from_user.id,message.reply_to_message.from_user.first_name,message.reply_to_message.from_user.id), parse_mode="Markdown")
        await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    except Exception as e:
        print(repr(e))

# Games
# Command: hand
@dp.message_handler(commands=['hand'])
async def hand_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if is_game_in_chat(message.chat.id):
            if await is_admin_group(message.chat.id, bot.id):
                return await bot.delete_message(message.chat.id, message.message_id)
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")

        verification_dirs_chat(message.chat.id)

        buttons  = [types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å üëç', callback_data="–†—É–∫–∞")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        get_info = await message.reply("üçç [%s](tg://user?id=%d) –∫–∏–¥–∞–µ—Ç –≤—ã–∑–æ–≤ –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞" % (message.from_user.first_name,message.from_user.id), parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:
        print(repr(e)) 

# Command: crosses
@dp.message_handler(commands=['crosses'])
async def crosses_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if is_game_in_chat(message.chat.id):
            if await is_admin_group(message.chat.id, bot.id):
                return await bot.delete_message(message.chat.id, message.message_id)
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")

        verification_dirs_chat(message.chat.id)

        buttons  = [types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚öî', callback_data="–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")] 
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)

        get_info = await message.reply("üçç [%s](tg://user?id=%d) —Ö–æ—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏" % (message.from_user.first_name,message.from_user.id), parse_mode="Markdown", reply_markup=keyboard)        
    except Exception as e:
        print(repr(e))

# Help function crosses
def progress_to_win_crosses(check_pos):
    if check_pos[0] != 0 and check_pos[0] == check_pos[1] and check_pos[1] == check_pos[2]:
        return check_pos[0]
    elif check_pos[3] != 0 and check_pos[3] == check_pos[4] and check_pos[4] == check_pos[5]:
        return check_pos[3]
    elif check_pos[6] != 0 and check_pos[6] == check_pos[7] and check_pos[7] == check_pos[8]:
        return check_pos[6]
    elif check_pos[0] != 0 and check_pos[0] == check_pos[3] and check_pos[3] == check_pos[6]:
        return check_pos[0]
    elif check_pos[1] != 0 and check_pos[1] == check_pos[4] and check_pos[4] == check_pos[7]:
        return check_pos[1]
    elif check_pos[2] != 0 and check_pos[2] == check_pos[5] and check_pos[5] == check_pos[8]:
        return check_pos[2]
    elif check_pos[0] != 0 and check_pos[0] == check_pos[4] and check_pos[4] == check_pos[8]:
        return check_pos[0]
    elif check_pos[2] != 0 and check_pos[2] == check_pos[4] and check_pos[4] == check_pos[6]:
        return check_pos[2]
    elif check_pos[0] != 0 and check_pos[1] != 0 and check_pos[2] != 0 and check_pos[3] != 0 and check_pos[4] != 0 and check_pos[5] != 0 and check_pos[6] != 0 and check_pos[7] != 0 and check_pos[8] != 0:
        return 4
    return False

# Command: titles
@dp.message_handler(commands=['titles'])
async def crosses_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if is_game_in_chat(message.chat.id):
            if await is_admin_group(message.chat.id, bot.id):
                return await bot.delete_message(message.chat.id, message.message_id)
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")

        if not await is_admin_group(message.chat.id, bot.id):
            return await message.reply("üçç –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        verification_dirs_chat(message.chat.id)
        first_letter = choice(letters)

        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("TITLES|%s|0|0" % first_letter)
            open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles.txt", "+w")

        await bot.delete_message(message.chat.id, message.message_id)

        get_info = await message.answer("üçç *–ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–Ω–æ—Å—Ç–µ–π*\n\nüìå –ë–æ—Ç –ø–∏—à–µ—Ç –±—É–∫–≤—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏\n–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±—É–¥–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è\n–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω,–≥–æ—Ä–æ–¥–æ–≤,—à—Ç–∞—Ç–æ–≤ –∏ –¥—Ä.\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥\n\n–ò —Ç–∞–∫ –Ω–∞—á–Ω—ë–º, –±—É–∫–≤–∞: *%s*" % first_letter, parse_mode="Markdown")        
        
        await asyncio.sleep(60)
        if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):
            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                record = game.read().split("|")

            if record[2] == "0":
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles.txt")
                return await bot.delete_message(message.chat.id, get_info.message_id)

    except Exception as e:
        print(repr(e))

# Command: associations
@dp.message_handler(commands=['associations'])
async def associations_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if not await is_admin_group(message.chat.id, bot.id):
            return await message.reply("üçç –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if is_game_in_chat(message.chat.id):
            if await is_admin_group(message.chat.id, bot.id):
                return await bot.delete_message(message.chat.id, message.message_id)
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")

        verification_dirs_chat(message.chat.id)

        with open(os.getcwd() + "/info/words_for_associations.txt", encoding="utf8") as game:
            words = game.read().split(",")

        POS_WORD = random.randint(0, len(words) - 1)
        step_first_message = await bot.send_message(message.chat.id, "üçç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏\n\n[%s](tg://user?id=%d) –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É!\n\n‚úè –ü–∏—à–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∫ —Å–ª–æ–≤—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 120 —Å–µ–∫—É–Ω–¥\n‚ö° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ\n\n–°–ª–æ–≤–æ –¥–ª—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π: *%s*" % (message.from_user.first_name,message.from_user.id,words[POS_WORD]), parse_mode="Markdown")

        parse_words(message.chat.id, words[POS_WORD])

        with open("chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("ASSOCIATIONS")

        await asyncio.sleep(60)
        step_second_message = await bot.send_message(message.chat.id, "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–ª–æ–≤–æ: *%s*\n‚åõ–û—Å—Ç–∞–ª–æ—Å—å: 60 —Å–µ–∫—É–Ω–¥..." % words[POS_WORD], parse_mode="Markdown")

        await asyncio.sleep(30)
        step_third_message = await bot.send_message(message.chat.id, "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–ª–æ–≤–æ: *%s*\n‚åõ–û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥..." % words[POS_WORD], parse_mode="Markdown")

        await asyncio.sleep(30)
        dirs = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations")

        os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
        os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/parse.txt")

        if not dirs:
            if await is_admin_group(message.chat.id, bot.id):
                # Remove messages
                await bot.delete_message(message.chat.id, message.message_id)
                await bot.delete_message(message.chat.id, step_first_message.message_id)
                await bot.delete_message(message.chat.id, step_second_message.message_id)
                return await bot.delete_message(message.chat.id, step_third_message.message_id)

            return await bot.send_message(message.chat.id, "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", parse_mode="Markdown")

        game_message = "üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        win_message = ""
        count = 1
        max = 0

        for item in dirs:
            if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + item):
                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + item) as player:
                    score = int(player.read())
                    
                info = await bot.get_chat_member(message.chat.id, int(item.replace(".txt", "")))
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + item)
                game_message += "[%s](tg://user?id=%d) - ‚ö° %d –æ—á–∫–æ–≤.\n" % (info.user.first_name, int(item.replace(".txt", "")), score)

                if score > max:
                    max = score
                    win_message = "\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:\n[%s](tg://user?id=%d) - ‚ö° %d –æ—á–∫–æ–≤" % (info.user.first_name, int(item.replace(".txt", "")), score)

        return await bot.send_message(message.chat.id, game_message + win_message, parse_mode="Markdown")   

    except Exception as e:
        print(repr(e))  

def parse_words(chat_id, word):
    try:
        url = 'http://sinonim.org/as/%s' % word
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36','Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'})
        soup = BeautifulSoup(response.text, 'lxml')
        sections = soup.find_all('ul', class_="assocPodryad")
        cases = soup.find_all('li')

        with open("chats/" + str(chat_id) + "/parse.txt", "+w") as parse:
            for item in cases:
                if "." not in item.get_text():
                    parse.write(item.get_text() + ",")

    except Exception as e:
        print(repr(e))

# Command: associations
@dp.message_handler(commands=['scallop'])
async def scallop_command(message: types.Message):
    try:
        if message.chat.id == message.from_user.id:
            return await bot.send_message(message.from_user.id, "üçç –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)")

        if not await is_admin_group(message.chat.id, bot.id):
            return await message.reply("üçç –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        if message.chat.id not in not_spam_commands:
            not_spam_commands[message.chat.id] = time.time()
        else:
            if (time.time() - not_spam_commands[message.chat.id]) * 1000 < 2000:
                if await is_admin_group(message.chat.id, bot.id):
                    return await bot.delete_message(message.chat.id, message.message_id)
                return await message.reply("üçç *–ü–æ–ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å...*", parse_mode="Markdown")
            not_spam_commands[message.chat.id] = time.time()

        if is_game_in_chat(message.chat.id):
            if await is_admin_group(message.chat.id, bot.id):
                return await bot.delete_message(message.chat.id, message.message_id)
            return message.answer("üçç *–í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!*", parse_mode="Markdown")

        verification_dirs_chat(message.chat.id)

        scallop_letters = ["–ë", "–í", "–ì", "–î", "–ö", "–õ", "–ú", "–ù", "–ü", "–†", "–°", "–¢"]
        first_lett = choice(scallop_letters)
        scallop_letters.remove(first_lett)

        second_lett = choice(scallop_letters)
        scallop_letters.remove(second_lett)

        third_lett = choice(scallop_letters)
        scallop_letters.remove(third_lett)

        step_first_message = await bot.send_message(message.chat.id, "üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n\n[%s](tg://user?id=%d) –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É!\n\n*–°—É—Ç—å –∏–≥—Ä—ã:*\n‚úè –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±—É–∫–≤\n‚úè –°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏\n‚úè –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–ª–æ–≤–µ\n\n–ë—É–∫–≤—ã: *%s %s %s*" % (message.from_user.first_name,message.from_user.id,first_lett,second_lett,third_lett), parse_mode="Markdown")

        with open("chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
            game.write("SCALLOP|%s|%s|%s" % (first_lett,second_lett,third_lett))

        open("chats/" + str(message.chat.id) + "/words.txt", "+w")

        await asyncio.sleep(60)
        step_second_message = await bot.send_message(message.chat.id, "üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n\n–ë—É–∫–≤—ã –¥–ª—è —Å–ª–æ–≤: *%s %s %s*\n‚åõ –û—Å—Ç–∞–ª–æ—Å—å: 60 —Å–µ–∫—É–Ω–¥..." % (first_lett,second_lett,third_lett), parse_mode="Markdown")

        await asyncio.sleep(30)
        step_third_message = await bot.send_message(message.chat.id, "üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n\n–ë—É–∫–≤—ã –¥–ª—è —Å–ª–æ–≤: *%s %s %s*\n‚åõ –û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥..." % (first_lett,second_lett,third_lett), parse_mode="Markdown")

        await asyncio.sleep(30)
        dirs = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop")

        os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
        os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/words.txt")

        if not dirs:
            if await is_admin_group(message.chat.id, bot.id):
                # Remove messages
                await bot.delete_message(message.chat.id, message.message_id)
                await bot.delete_message(message.chat.id, step_first_message.message_id)
                await bot.delete_message(message.chat.id, step_second_message.message_id)
                return await bot.delete_message(message.chat.id, step_third_message.message_id)

            return await bot.send_message(message.chat.id, "üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", parse_mode="Markdown")

        game_message = "üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        win_message = ""
        max = 0

        for item in dirs:
            if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + item):
                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + item) as player:
                    score = int(player.read())
                    
                info = await bot.get_chat_member(message.chat.id, int(item.replace(".txt", "")))
                os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + item)
                game_message += "[%s](tg://user?id=%d) - ‚ö° %d –æ—á–∫–æ–≤.\n" % (info.user.first_name, int(item.replace(".txt", "")), score)

                if score > max:
                    max = score
                    win_message = "\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:\n[%s](tg://user?id=%d) - ‚ö° %d –æ—á–∫–æ–≤" % (info.user.first_name, int(item.replace(".txt", "")), score)

        return await bot.send_message(message.chat.id, game_message + win_message, parse_mode="Markdown")   

    except Exception as e:
        print(repr(e))  

# Types: text
@dp.message_handler(content_types=["text"])
async def check_all_messages(message):
    try:
        if is_game_in_chat(message.chat.id):
            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                game_text = game.read()

            if "SCALLOP" in game_text:
                try:
                    with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                        records = game.read().split("|")

                    if records[1] in message.text.upper() and records[2] in message.text.upper() and records[3] in message.text.upper():
                        if morph.word_is_known(message.text):
                            word = morph.parse(message.text)[0]
                            if word.tag.POS != "NOUN":
                                return True

                            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/words.txt") as parse:
                                text = parse.read()

                            text_split = text.split(",")
                            for item in text_split:
                                if message.text.lower() in item.lower():
                                    return await message.reply("üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n\n–°–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ!", parse_mode="Markdown")

                            with open("chats/" + str(message.chat.id) + "/words.txt", "+w") as parse:
                                parse.write(message.text + ",")

                            await message.reply("üçç *–ì—Ä–µ–±–µ—à–æ–∫*\n\n–°–ª–æ–≤–æ *%s* –∑–∞—Å—á–∏—Ç–∞–Ω–æ\n‚ö° *+%d –æ—á–∫–æ–≤*" % (message.text, len(message.text) / 2), parse_mode="Markdown")  
                            if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + str(message.from_user.id) + ".txt"):
                                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + str(message.from_user.id) + ".txt") as player:
                                    score = int(player.read())

                                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + str(message.from_user.id) + ".txt" , "+w") as player:
                                    player.write(str(score + int(len(message.text) / 2)))
                            else:
                                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/scallop/" + str(message.from_user.id) + ".txt" , "+w") as player:
                                    player.write(str(int(len(message.text) / 2)))

                except Exception as e:
                    print(repr(e)) 

            if "TITLES" in game_text:
                try:
                    with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                        records = game.read().split("|")

                    city = message.text.upper() 
                    first_letter = city[:1]
                    last_letter = city.replace(city[:-1], "")

                    if int(records[2]) == message.from_user.id or first_letter != records[1]:
                        return True

                    with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles.txt") as file:
                        cities = file.read()

                    result = cities.split(",")
                    for temp in result:
                        if temp.lower() == message.text.lower():
                            return await message.reply("üçç *–ú–µ—Å—Ç–Ω–æ—Å—Ç—å*\n\n–≠—Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞!", parse_mode="Markdown")

                    mgr = owm.weather_manager()
                    mgr.weather_at_place(message.text)

                    for i in range(len(city)):
                        if last_letter in letters:
                            break

                        else:
                            if len(last_letter) != 1:
                                last_letter = last_letter[:1]
                            else:
                                last_letter = city.replace(city[:len(city) - 2 - i], "").replace(last_letter, "")

                    with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles.txt", "+w") as file:
                        file.write(cities + message.text + ",")

                    with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt", "+w") as game:
                        game.write("TITLES|%s|%d|%d" % (last_letter, message.from_user.id, int(records[3]) + 1))

                    await message.reply("üçç *–ú–µ—Å—Ç–Ω–æ—Å—Ç—å - %s*\n\nüìå –ë—É–∫–≤–∞ - *%s*\n‚åõ –•–æ–¥: *60 —Å–µ–∫—É–Ω–¥*" % (message.text, last_letter), parse_mode="Markdown")
                    
                    if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + str(message.from_user.id) + ".txt"):
                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + str(message.from_user.id) + ".txt") as player:
                            score = int(player.read())

                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + str(message.from_user.id) + ".txt" , "+w") as player:
                            player.write(str(score + 1))
                    else:
                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + str(message.from_user.id) + ".txt" , "+w") as player:
                            player.write(str(1))

                    await asyncio.sleep(60)
                    if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt"):

                        with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt") as game:
                            record = game.read().split("|")

                        if int(record[2]) == message.from_user.id and int(record[3]) == int(records[3]) + 1:
                            os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/info.txt")
                            os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles.txt")

                            players = os.listdir(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles")
                            try:
                                max = 0
                                for temp in players:
                                    with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + temp) as player:
                                        score = int(player.read())
                                        
                                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + temp)

                                    if score > max:
                                        max = score
                                        index = int(temp.replace(".txt", ""))
                                        info = await bot.get_chat_member(message.chat.id, int(temp.replace(".txt", "")))

                                await message.answer("üçç *–ú–µ—Å—Ç–Ω–æ—Å—Ç—å*\n–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:\nüëë [%s](tg://user?id=%d) - –Ω–∞–∑–≤–∞–ª(-–∞) –±–æ–ª—å—à–µ –≤—Å–µ—Ö –º–µ—Å—Ç–Ω–æ—Å—Ç–µ–π" % (info.user.first_name, index), parse_mode="Markdown")
                            except Exception as e:
                                await message.answer("üçç *–ú–µ—Å—Ç–Ω–æ—Å—Ç—å*\n–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!", parse_mode="Markdown")
                                for temp in players: 
                                    os.remove(os.getcwd() + "/chats/" + str(message.chat.id) + "/titles/" + temp)
                except Exception as e:
                    pass

            if "ASSOCIATIONS" in game_text:

                with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/parse.txt") as parse:
                    text = parse.read()

                text_split = text.split(",")
                for item in text_split:
                    if message.text.lower() == item:
                        with open("chats/" + str(message.chat.id) + "/parse.txt", "+w") as parse:
                            parse.write(text.replace(message.text.lower() + ",", ""))

                        await message.reply("üçç *–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏*\n\n–°–ª–æ–≤–æ *%s* –∑–∞—Å—á–∏—Ç–∞–Ω–æ\n‚ö° *+%d –æ—á–∫–æ–≤*" % (message.text, len(message.text) / 2), parse_mode="Markdown")  
                        if os.path.isfile(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt"):
                            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt") as player:
                                score = int(player.read())

                            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt" , "+w") as player:
                                player.write(str(score + int(len(message.text) / 2)))
                        else:
                            with open(os.getcwd() + "/chats/" + str(message.chat.id) + "/associations/" + str(message.from_user.id) + ".txt" , "+w") as player:
                                player.write(str(int(len(message.text) / 2)))

        morse = [
            {"letter": "–∞", "morse": "‚Ä¢‚Äì "},
            {"letter": "–±", "morse": "‚Äì‚Ä¢‚Ä¢‚Ä¢ "},
            {"letter": "–≤", "morse": "‚Ä¢‚Äì‚Äì "},
            {"letter": "–≥", "morse": "‚Äì‚Äì‚Ä¢ "},
            {"letter": "–¥", "morse": "‚Äì‚Ä¢‚Ä¢ "},
            {"letter": "–µ", "morse": "‚Ä¢ "},
            {"letter": "–∂", "morse": "‚Ä¢‚Ä¢‚Ä¢‚Äì "},
            {"letter": "–∑", "morse": "‚Äì‚Äì‚Ä¢‚Ä¢ "},
            {"letter": "–∏", "morse": "‚Ä¢‚Ä¢ "},
            {"letter": "–π", "morse": "‚Ä¢‚Äì‚Äì‚Äì "},
            {"letter": "–∫", "morse": "‚Äì‚Ä¢‚Äì "},
            {"letter": "–ª", "morse": "‚Ä¢‚Äì‚Ä¢‚Ä¢ "},
            {"letter": "–º", "morse": "‚Äì‚Äì "},
            {"letter": "–Ω", "morse": "‚Äì‚Ä¢ "},
            {"letter": "–æ", "morse": "‚Äì‚Äì‚Äì "},
            {"letter": "–ø", "morse": "‚Ä¢‚Äì‚Äì‚Ä¢ "},
            {"letter": "—Ä", "morse": "‚Ä¢‚Äì‚Ä¢ "},
            {"letter": "—Å", "morse": "‚Ä¢‚Ä¢‚Ä¢ "},
            {"letter": "—Ç", "morse": "‚Äì "},
            {"letter": "—É", "morse": "‚Ä¢‚Ä¢‚Äì "},
            {"letter": "—Ñ", "morse": "‚Ä¢‚Ä¢‚Äì‚Ä¢ "},
            {"letter": "—Ö", "morse": "‚Ä¢‚Ä¢‚Ä¢‚Ä¢ "},
            {"letter": "—Ü", "morse": "‚Äì‚Ä¢‚Äì‚Ä¢ "},
            {"letter": "—á", "morse": "‚Äì‚Äì‚Äì‚Ä¢ "},
            {"letter": "—à", "morse": "‚Äì‚Äì‚Äì‚Äì "},
            {"letter": "—â", "morse": "‚Äì‚Äì‚Ä¢‚Äì "},
            {"letter": "—ä", "morse": "‚Ä¢‚Äì‚Äì‚Ä¢‚Äì‚Ä¢ "},
            {"letter": "—ã", "morse": "‚Äì‚Ä¢‚Äì‚Äì "},
            {"letter": "—å", "morse": "‚Äì‚Ä¢‚Ä¢‚Äì "},
            {"letter": "—ç", "morse": "‚Ä¢‚Ä¢‚Äì‚Ä¢‚Ä¢ "},
            {"letter": "—é", "morse": "‚Ä¢‚Ä¢‚Äì‚Äì "},
            {"letter": "—è", "morse": "‚Ä¢‚Äì‚Ä¢‚Äì "},
        ]
        string = message.text.lower()
        string = string.replace("—ë", "–µ")
        for temp in morse:
            string = string.replace(temp["letter"], temp["morse"])
        if message.from_user.id == message.chat.id:
             await message.answer(string)

    except Exception as e:
        print(repr(e))  

# Types: callback keyboard
@dp.callback_query_handler(lambda callback_query: True)
async def some_callback_handler(callback_query: types.CallbackQuery):
    try:
        code = callback_query.data
        if code == "–ò–≥—Ä—ã":

            message = "üçç *–ò–≥—Ä—ã:*\n/associations - –ò–≥—Ä–∞ –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏\n/crosses - –ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n/hand - –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\n/scallop - –ò–≥—Ä–∞ –≥—Ä–µ–±–µ—à–æ–∫\n/titles - –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–Ω–æ—Å—Ç–µ–π"
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=None)
        
        elif code == "–ü–æ–º–æ—â—å":

            message = "üçç *–ü–æ–º–æ—â—å*\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/mute - –ó–∞–≥–ª—É—à–∏—Ç—å –Ω–∞ 30 –º–∏–Ω\n/kick - –ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞"
            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=None)

        elif code == "–†—É–∫–∞":

            if not callback_query.message.reply_to_message:
                return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É..", parse_mode="Markdown",reply_markup=None)

            if callback_query.from_user.id == callback_query.message.reply_to_message.from_user.id:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –≠—Ç–æ –≤–∞—à –≤—ã–∑–æ–≤...", show_alert=True)

            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                game.write("%d|%s|%d|%s|None|None" % (callback_query.from_user.id, callback_query.from_user.first_name, callback_query.message.reply_to_message.from_user.id, callback_query.message.reply_to_message.from_user.first_name))

            buttons = [types.InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å", callback_data="–ö–∞–º–µ–Ω—å"),types.InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="–ù–æ–∂–Ω–∏—Ü—ã"),types.InlineKeyboardButton(text="–ë—É–º–∞–≥–∞", callback_data="–ë—É–º–∞–≥–∞")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            game_message = "üçç *–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç..*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d)\n2Ô∏è‚É£ [%s](tg://user?id=%d)\n\n‚åõ –•–æ–¥: *60 —Å–µ–∫—É–Ω–¥*" % (callback_query.from_user.first_name, callback_query.from_user.id, callback_query.message.reply_to_message.from_user.first_name, callback_query.message.reply_to_message.from_user.id)
            await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)
            
            await asyncio.sleep(20)

            if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt"):

                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt") as game:
                    result = game.read().split("|")

                os.remove(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt")

                if result[4] == "None" and result[5] == "None":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d)\n2Ô∏è‚É£ [%s](tg://user?id=%d)\n\n–ù–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥.." % (result[1], int(result[0]), result[3], int(result[2]))
                elif result[4] == "None":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - –ù–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥\n2Ô∏è‚É£ [%s](tg://user?id=%d)" % (result[1], int(result[0]), result[3], int(result[2]))
                elif result[5] == "None":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d)\n2Ô∏è‚É£ [%s](tg://user?id=%d) - –ù–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥" % (result[1], int(result[0]), result[3], int(result[2]))    
                
                await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=None)

        elif code == "–ö–∞–º–µ–Ω—å" or code == "–ù–æ–∂–Ω–∏—Ü—ã" or code =="–ë—É–º–∞–≥–∞":

            if not os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt"):
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt") as game:
                result = game.read().split("|")

            if int(result[0]) != callback_query.from_user.id and int(result[2]) != callback_query.from_user.id:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ö–æ–¥–∏—Ç—å", show_alert=True)

            buttons = [types.InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å", callback_data="–ö–∞–º–µ–Ω—å"),types.InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="–ù–æ–∂–Ω–∏—Ü—ã"),types.InlineKeyboardButton(text="–ë—É–º–∞–≥–∞", callback_data="–ë—É–º–∞–≥–∞")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            if int(result[0]) == callback_query.from_user.id and result[4] == "None":
                result[4] = code
            elif int(result[2]) == callback_query.from_user.id and result[5] == "None":
                result[5] = code

            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                game.write("%s|%s|%s|%s|%s|%s" % (result[0], result[1], result[2], result[3], result[4], result[5]))
            
            game_message = "üçç *–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç..*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d)\n2Ô∏è‚É£ [%s](tg://user?id=%d)\n\n‚åõ –•–æ–¥: *60 —Å–µ–∫—É–Ω–¥*\n‚ñ∂ [%s](tg://user?id=%d) - —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥" % (result[1], int(result[0]), result[3], int(result[2]), callback_query.from_user.first_name, callback_query.from_user.id)
            if result[4] != "None" and result[5] != "None":
                os.remove(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/hand/" + str(callback_query.message.message_id) + ".txt")
                keyboard = None
                if result[4] == result[5]:
                    game_message = "üçç *–ù–∏—á—å—è*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n2Ô∏è‚É£ [%s](tg://user?id=%d) - %s" % (result[1], int(result[0]), result[4], result[3], int(result[2]), result[5])
                elif result[4] == "–ö–∞–º–µ–Ω—å" and result[5] == "–ù–æ–∂–Ω–∏—Ü—ã" or result[4] == "–ë—É–º–∞–≥–∞" and result[5] == "–ö–∞–º–µ–Ω—å" or result[4] == "–ù–æ–∂–Ω–∏—Ü—ã" and result[5] == "–ë—É–º–∞–≥–∞":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n2Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:*\n[%s](tg://user?id=%d) - üëë" % (result[1], int(result[0]), result[4], result[3], int(result[2]), result[5], result[1], int(result[0]))
                elif result[5] == "–ö–∞–º–µ–Ω—å" and result[4] == "–ù–æ–∂–Ω–∏—Ü—ã" or result[5] == "–ë—É–º–∞–≥–∞" and result[4] == "–ö–∞–º–µ–Ω—å" or result[5] == "–ù–æ–∂–Ω–∏—Ü—ã" and result[4] == "–ë—É–º–∞–≥–∞":
                    game_message = "üçç *–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n1Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n2Ô∏è‚É£ [%s](tg://user?id=%d) - %s\n\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:*\n[%s](tg://user?id=%d) - üëë" % (result[1], int(result[0]), result[4], result[3], int(result[2]), result[5], result[3], int(result[2]))

            return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)

        elif code == "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏":
            if not callback_query.message.reply_to_message:
                return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="üçç –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É..", parse_mode="Markdown",reply_markup=None)

            if callback_query.from_user.id == callback_query.message.reply_to_message.from_user.id:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∏–≥—Ä—ã...", show_alert=True)

            buttons = [types.InlineKeyboardButton(text="‚è∫", callback_data="1"),types.InlineKeyboardButton(text="‚è∫", callback_data="2"),types.InlineKeyboardButton(text="‚è∫", callback_data="3"),
            types.InlineKeyboardButton(text="‚è∫", callback_data="4"),types.InlineKeyboardButton(text="‚è∫", callback_data="5"),types.InlineKeyboardButton(text="‚è∫", callback_data="6"),
            types.InlineKeyboardButton(text="‚è∫", callback_data="7"),types.InlineKeyboardButton(text="‚è∫", callback_data="8"),types.InlineKeyboardButton(text="‚è∫", callback_data="9")]
            keyboard = types.InlineKeyboardMarkup(row_width=3)
            keyboard.add(*buttons)

            CHOSEE = random.randint(0, 100)
            crosses_player_index = callback_query.from_user.id
            crosses_player_name = callback_query.from_user.first_name
            zero_player_index = callback_query.message.reply_to_message.from_user.id
            zero_player_name = callback_query.message.reply_to_message.from_user.first_name
            if CHOSEE >= 50:
                crosses_player_index = callback_query.message.reply_to_message.from_user.id
                crosses_player_name = callback_query.message.reply_to_message.from_user.first_name
                zero_player_index = callback_query.from_user.id
                zero_player_name = callback_query.from_user.first_name

            message = "üçç –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚åõ –ù–∞ —Ö–æ–¥: *20 —Å–µ–∫—É–Ω–¥*\n\n‚ùå [%s](tg://user?id=%d) —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏\n‚≠ï [%s](tg://user?id=%d) —Ö–æ–¥–∏—Ç –Ω–æ–ª–∏–∫–∞–º–∏\n\n–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: [%s](tg://user?id=%d) ‚ùå" % (crosses_player_name, crosses_player_index, zero_player_name, zero_player_index, crosses_player_name, crosses_player_index)
            await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=keyboard)
            
            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                game.write("%d|%s|%d|%s|CROSS|1|0|0|0|0|0|0|0|0|0" % (crosses_player_index, crosses_player_name, zero_player_index, zero_player_name))

            await asyncio.sleep(20)
            if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt"):
                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt") as game:
                    game_split = game.read().split("|")

                if int(game_split[5]) == 1:
                    message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%d) - –ù–µ —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥\n‚≠ï [%s](tg://user?id=%d)" % (crosses_player_name, crosses_player_index, zero_player_name, zero_player_index)
                    return await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=message, parse_mode="Markdown",reply_markup=None)

        elif code == "1" or code == "2" or code == "3" or code == "4" or code == "5" or code == "6" or code == "7" or code == "8" or code == "9":
            if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt"):                 
                with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt") as game:
                    game_info = game.read().split("|")

                if (callback_query.from_user.id == int(game_info[0]) and game_info[4] == "CROSS") or (callback_query.from_user.id == int(game_info[2]) and game_info[4] == "ZERO"):
                    # Variables
                    position = int(code) - 1
                    keyboard_text = ["‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫","‚è∫"]
                    callback_post = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
                    crosses_position = []
                    game_message = ""
                    write_to_txt = ""

                    for i in range(9):
                        crosses_position.append(int(game_info[i+6]))

                    if callback_query.from_user.id == int(game_info[0]) and game_info[4] == "CROSS":
                        game_message = "üçç –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚åõ –ù–∞ —Ö–æ–¥: *20 —Å–µ–∫—É–Ω–¥*\n\n‚ùå [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏\n‚≠ï [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –Ω–æ–ª–∏–∫–∞–º–∏\n\n–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: [%s](tg://user?id=%s) ‚≠ï" % (game_info[1], game_info[0], game_info[3], game_info[2], game_info[3], game_info[2])
                        crosses_position[position] = 2
                        write_to_txt = "%s|%s|%s|%s|ZERO|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d" % (game_info[0], game_info[1], game_info[2], game_info[3], int(game_info[5]) + 1, crosses_position[0],crosses_position[1],crosses_position[2],crosses_position[3],crosses_position[4],crosses_position[5],crosses_position[6],crosses_position[7],crosses_position[8])
                    else:
                        game_message = "üçç –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚åõ –ù–∞ —Ö–æ–¥: *20 —Å–µ–∫—É–Ω–¥*\n\n‚ùå [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏\n‚≠ï [%s](tg://user?id=%s) —Ö–æ–¥–∏—Ç –Ω–æ–ª–∏–∫–∞–º–∏\n\n–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: [%s](tg://user?id=%s) ‚ùå" % (game_info[1], game_info[0], game_info[3], game_info[2], game_info[1], game_info[0])
                        crosses_position[position] = 3
                        write_to_txt = "%s|%s|%s|%s|CROSS|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d" % (game_info[0], game_info[1], game_info[2], game_info[3], int(game_info[5]) + 1, crosses_position[0],crosses_position[1],crosses_position[2],crosses_position[3],crosses_position[4],crosses_position[5],crosses_position[6],crosses_position[7],crosses_position[8])
                    
                    with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt", "w+") as game:
                        game.write(write_to_txt)

                    for i in range(9):
                        if crosses_position[i] == 2:
                            keyboard_text[i] = "‚ùå"
                            callback_post[i] = "–í—ã–±—Ä–∞–Ω–æ"
                        elif crosses_position[i] == 3:
                            keyboard_text[i] = "‚≠ï"
                            callback_post[i] = "–í—ã–±—Ä–∞–Ω–æ" 

                    buttons = [types.InlineKeyboardButton(text=keyboard_text[0], callback_data=callback_post[0]),types.InlineKeyboardButton(text=keyboard_text[1], callback_data=callback_post[1]),types.InlineKeyboardButton(text=keyboard_text[2], callback_data=callback_post[2]),
                    types.InlineKeyboardButton(text=keyboard_text[3], callback_data=callback_post[3]),types.InlineKeyboardButton(text=keyboard_text[4], callback_data=callback_post[4]),types.InlineKeyboardButton(text=keyboard_text[5], callback_data=callback_post[5]),
                    types.InlineKeyboardButton(text=keyboard_text[6], callback_data=callback_post[6]),types.InlineKeyboardButton(text=keyboard_text[7], callback_data=callback_post[7]),types.InlineKeyboardButton(text=keyboard_text[8], callback_data=callback_post[8])]
                    keyboard = types.InlineKeyboardMarkup(row_width=3)
                    keyboard.add(*buttons)

                    if progress_to_win_crosses(crosses_position) == 2:
                        game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s) - üëë\n‚≠ï [%s](tg://user?id=%s)" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                        keyboard = None
                    elif progress_to_win_crosses(crosses_position) == 3:
                        game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s)\n‚≠ï [%s](tg://user?id=%s) - üëë" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                        keyboard = None
                    elif progress_to_win_crosses(crosses_position) == 4:
                        game_message = "üçç *–ù–∏—á—å—è!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s)\n‚≠ï [%s](tg://user?id=%s)" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                        keyboard = None

                    if keyboard is None:
                        os.remove(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt")

                    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)
                    if keyboard is not None:
                        await asyncio.sleep(20)
                        if os.path.isfile(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt"):
                            with open(os.getcwd() + "/chats/" + str(callback_query.message.chat.id) + "/crosses/" + str(callback_query.message.message_id) + ".txt") as game:
                                game_info_next = game.read().split("|")

                            if int(game_info_next[5]) == int(game_info[5]) + 1:
                                if game_info_next[4] == "CROSS":
                                    game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s) - –ù–µ —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥\n‚≠ï [%s](tg://user?id=%s)" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                                else:
                                    game_message = "üçç *–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!*\n\n%s | %s | %s\n%s | %s | %s\n%s | %s | %s\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ùå [%s](tg://user?id=%s)\n‚≠ï [%s](tg://user?id=%s) - –ù–µ —Å–¥–µ–ª–∞–ª(-–∞) —Ö–æ–¥" % (keyboard_text[0],keyboard_text[1],keyboard_text[2],keyboard_text[3],keyboard_text[4],keyboard_text[5],keyboard_text[6],keyboard_text[7],keyboard_text[8],game_info[1], game_info[0], game_info[3], game_info[2])
                                keyboard = None
                                await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=game_message, parse_mode="Markdown",reply_markup=keyboard)

            else:
                return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.", show_alert=True)
        elif code == "–í—ã–±—Ä–∞–Ω–æ":

            return await bot.answer_callback_query(callback_query_id=callback_query.id, text="üçç –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)

    except Exception as e:
        print(repr(e)) 

if __name__ == "__main__":
    if not os.path.isdir("chats"):
            os.mkdir("chats")

    if not os.path.isdir("users"):
        os.mkdir("users")

    chats = os.listdir(os.getcwd() + "/chats")
    for temp in chats:
        try:
            file = os.getcwd() + "/chats/" + temp + "/info.txt"
            with open(os.getcwd() + "/chats/" + temp + "/info.txt") as game:
                result = game.read()

            if "ASSOCIATIONS" in result:
                players = os.listdir(os.getcwd() + "/chats/" + temp + "/associations")
                for item in players:
                    os.remove(os.getcwd() + "/chats/" + temp + "/associations/" + item)

            if "TITLES" in result:
                os.remove(os.getcwd() + "/chats/" + temp + "/titles.txt")

            os.remove(os.getcwd() + "/chats/" + temp + "/info.txt")
        except Exception as e:
            continue

    executor.start_polling(dp, skip_updates=True)

